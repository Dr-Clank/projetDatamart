
-- VUE DES CATEGORY FILTREE
CREATE VIEW FOOD_FILTERED_CATEGORY as (SELECT c.BUSINESS_ID, LOWER(c.CATEGORY) as FOOD_CATEGORY FROM CATEGORY c INNER JOIN FOOD_CATEGORY fc on c.CATEGORY = LOWER(fc.FOOD_CATEGORY));

-- VUE DES BUSINESS FILTREE PAR LES CATEGORY
create view FOOD_BUSINESS as (SELECT distinct b.BUSINESS_ID, b.NAME, b.STARS, b.REVIEW_COUNT, b.IS_OPEN FROM BUSINESS b INNER JOIN FOOD_FILTERED_CATEGORY ffc on b.BUSINESS_ID = ffc.BUSINESS_ID);


-- Vue matérialisé table de fait FAIT_REVIEW
CREATE MATERIALIZED VIEW FAIT_REVIEW  AS
WITH rank_category AS (
    SELECT
        MAX(r.REVIEW_ID) AS REVIEW_ID,
        r.USER_ID,
        c.FOOD_CATEGORY,
        COUNT(c.FOOD_CATEGORY) AS Ref_Category,
        RANK() OVER (PARTITION BY r.USER_ID ORDER BY COUNT(c.FOOD_CATEGORY) DESC) AS n_Rank
    FROM
        REVIEW r
    INNER JOIN
        FOOD_FILTERED_CATEGORY c ON r.BUSINESS_ID = c.BUSINESS_ID
    GROUP BY
        r.USER_ID,
        c.FOOD_CATEGORY
    ORDER BY
        r.USER_ID
)
SELECT
    r.REVIEW_ID,
    r.BUSINESS_ID,
    r."DATE",
    r.STARS,
    r.USER_ID,
    rc.Ref_Category,
    CASE
        WHEN rc.Ref_Category = 1 THEN 'unknown'
        ELSE rc.FOOD_CATEGORY
    END AS client_preference
FROM
    rank_category rc
INNER JOIN
    REVIEW r ON rc.REVIEW_ID = r.REVIEW_ID  
WHERE
    rc.n_Rank = 1;

-- Vue table de fait FAIT_CHECKIN
CREATE MATERIALIZED VIEW FAIT_CHECKIN as(
SELECT BUSINESS_ID, AVG(ABS(TO_DATE(FIRST_DATE,'yyyy/mm/dd hh24:mi:ss')-TO_DATE(PREV_DATE,'yyyy/mm/dd hh24:mi:ss'))) as interval_moyen from (
  SELECT ch.BUSINESS_ID, "DATE" as FIRST_DATE,
      LAG("DATE", 1, 0) OVER (PARTITION BY fb.BUSINESS_ID ORDER BY fb.BUSINESS_ID,"DATE") AS PREV_DATE
    FROM CHECKIN ch INNER JOIN FOOD_BUSINESS fb on fb.BUSINESS_ID = ch.BUSINESS_ID
  )
  WHERE PREV_DATE <> '0'
  GROUP BY BUSINESS_ID
);